{"version":3,"sources":["components/video_list/video_list.module.css","components/video_item/video_item.module.css","components/search_haeder/search_header.module.css","app.module.css","components/search_haeder/search_header.jsx","components/video_detail/video_detail.jsx","components/video_item/video_item.jsx","components/video_list/video_list.jsx","app.jsx","service/youtube.js","index.js","components/video_detail/video_detail.module.css"],"names":["module","exports","SearchHeader","memo","onSearch","inputRef","useRef","handleSearch","value","current","console","log","className","styles","header","logo","img","src","alt","title","ref","input","type","placeholder","onKeyPress","event","key","button","onClick","buttonImg","Video_detail","video","snippet","detail","width","height","id","frameBorder","allowFullScreen","channelTitle","description","VideoItem","onVideoClick","displayType","display","list","grid","container","thumbnail","thumbnails","medium","url","metadata","channel","VideoList","videos","style","map","App","youtube","useState","setVideos","selectedVideo","setSelectedVideo","search","useCallback","query","then","useEffect","mostPopular","app","content","Youtube","httpClient","this","a","get","params","part","chart","maxResults","response","data","items","q","item","videoId","axios","create","baseURL","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21df697e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"videos\":\"video_list_videos__3GvWA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"video_item_container__23ff2\",\"grid\":\"video_item_grid__3r6cl\",\"list\":\"video_item_list__2lqWk\",\"video\":\"video_item_video__1YXjc\",\"thumbnail\":\"video_item_thumbnail__3vxFU\",\"metadata\":\"video_item_metadata__2Qzul\",\"title\":\"video_item_title__3Miq8\",\"channel\":\"video_item_channel__1iaTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"search_header_header__3NxIq\",\"logo\":\"search_header_logo__1sotJ\",\"input\":\"search_header_input__2Hgg_\",\"button\":\"search_header_button__3X2FF\",\"buttonImg\":\"search_header_buttonImg__1QkT8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__1RgpC\",\"content\":\"app_content__3Wtfq\",\"detail\":\"app_detail__LiGw0\",\"list\":\"app_list__1mu7i\"};","import styles from \"./search_header.module.css\";\r\nimport React, { memo, useRef } from \"react\";\r\n\r\n// memo : 전달되는 props이 바뀌면 리-랜더링 된다. 지금 실행해보면 memo를 썼음에도 리랜더링 되고 있는데 이것은 props이 바뀌었다는 의미!\r\nconst SearchHeader = memo(({ onSearch }) => {\r\n  const inputRef = useRef();\r\n  const handleSearch = () => {\r\n    const value = inputRef.current.value;\r\n    onSearch(value);\r\n  };\r\n\r\n  const onClick = () => {\r\n    handleSearch();\r\n  };\r\n\r\n  const onKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      handleSearch();\r\n    }\r\n  };\r\n  console.log(\"header!!!!!!!!!!\");\r\n  return (\r\n    <header className={styles.header}>\r\n      <div className={styles.logo}>\r\n        <img className={styles.img} src=\"/images/logo.png\" alt=\"logo\" />\r\n        <h1 className={styles.title}>Yotube</h1>\r\n      </div>\r\n      <input\r\n        ref={inputRef}\r\n        className={styles.input}\r\n        type=\"search\"\r\n        placeholder=\"Search...\"\r\n        onKeyPress={onKeyPress}\r\n      />\r\n      <button className={styles.button} type=\"submit\" onClick={onClick}>\r\n        {/* 내 습관은 (e) => this.onClick(e) event를 함수로 넘겨줘서 그걸 받아서 e.key를 찾았을텐데 이렇게도 되는구나!!! */}\r\n        <img\r\n          className={styles.buttonImg}\r\n          src=\"/images/search.png\"\r\n          alt=\"search\"\r\n        />\r\n      </button>\r\n    </header>\r\n  );\r\n});\r\n\r\nexport default SearchHeader;\r\n","import React from \"react\";\r\nimport styles from \"./video_detail.module.css\";\r\n\r\nconst Video_detail = ({ video, video: { snippet } }) => (\r\n  <section className={styles.detail}>\r\n    <iframe\r\n      className={styles.video}\r\n      title=\"youtube video player\"\r\n      type=\"text/html\"\r\n      width=\"100%\"\r\n      height=\"500px\"\r\n      src={`https://www.youtube.com/embed/${video.id}`}\r\n      frameBorder=\"0\"\r\n      allowFullScreen\r\n    />\r\n    <h2>{snippet.title}</h2>\r\n    <h2>{snippet.channelTitle}</h2>\r\n    <pre className={styles.description}>{snippet.description}</pre>\r\n  </section>\r\n);\r\n\r\nexport default Video_detail;\r\n","import React, { memo } from \"react\";\r\nimport styles from \"./video_item.module.css\";\r\n\r\n// Latest version --> memo 사용, 사용 이유는 영상 클릭 할 때 마다 아이템 목록 개별 건 들이 리랜더링 되기 때문이다.\r\nconst VideoItem = memo(\r\n  ({ video, video: { snippet, id }, onVideoClick, display }) => {\r\n    // console.log(\"video id :::\", id, display);\r\n    const displayType = display === \"list\" ? styles.list : styles.grid;\r\n    return (\r\n      <li\r\n        className={`${styles.container} ${displayType}`}\r\n        onClick={() => onVideoClick(video)}\r\n      >\r\n        <div className={styles.video}>\r\n          <img\r\n            className={styles.thumbnail}\r\n            src={snippet.thumbnails.medium.url}\r\n            alt=\"video thumbnail\"\r\n          />\r\n          <div className={styles.metadata}>\r\n            <p className={styles.title}>{snippet.title}</p>\r\n            <p className={styles.channel}>{snippet.channelTitle}</p>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n);\r\n\r\n// New version --> old version에서 '호이' keyword 검색시 key값이 중복이라는 warning이 발생하여 확인하기 위해 New version으로 변경해봄.\r\n// 결국 같은 기능임.. 단순히 console 확인하기 위함.\r\n// const VideoItem = ({\r\n//   video,\r\n//   video: { snippet, id },\r\n//   onVideoClick,\r\n//   display,\r\n// }) => {\r\n//   // console.log(\"video id :::\", id, display);\r\n//   const displayType = display === \"list\" ? styles.list : styles.grid;\r\n//   return (\r\n//     <li\r\n//       className={`${styles.container} ${displayType}`}\r\n//       onClick={() => onVideoClick(video)}\r\n//     >\r\n//       <div className={styles.video}>\r\n//         <img\r\n//           className={styles.thumbnail}\r\n//           src={snippet.thumbnails.medium.url}\r\n//           alt=\"video thumbnail\"\r\n//         />\r\n//         <div className={styles.metadata}>\r\n//           <p className={styles.title}>{snippet.title}</p>\r\n//           <p className={styles.channel}>{snippet.channelTitle}</p>\r\n//         </div>\r\n//       </div>\r\n//     </li>\r\n//   );\r\n// };\r\n\r\n// Old version\r\n// const VideoItem = ({ video: { snippet } }) => (\r\n//   <li className={styles.container}>\r\n//     <div className={styles.video}>\r\n//       <img\r\n//         className={styles.thumbnail}\r\n//         src={snippet.thumbnails.medium.url}\r\n//         alt=\"video thumbnail\"\r\n//       />\r\n//       <div className={styles.metadata}>\r\n//         <p className={styles.title}>{snippet.title}</p>\r\n//         <p className={styles.channel}>{snippet.channelTitle}</p>\r\n//       </div>\r\n//     </div>\r\n//   </li>\r\n// );\r\n\r\nexport default VideoItem;\r\n","import React from \"react\";\r\nimport VideoItem from \"../video_item/video_item\";\r\nimport style from \"./video_list.module.css\";\r\n\r\nconst VideoList = ({ videos, onVideoClick, display }) => {\r\n  return (\r\n    <>\r\n      <ul className={style.videos}>\r\n        {videos.map((video) => (\r\n          <VideoItem\r\n            key={video.id}\r\n            video={video}\r\n            onVideoClick={onVideoClick}\r\n            display={display}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VideoList;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport styles from \"./app.module.css\";\nimport SearchHeader from \"./components/search_haeder/search_header\";\nimport VideoDetail from \"./components/video_detail/video_detail\";\nimport VideoList from \"./components/video_list/video_list\";\n\nfunction App({ youtube }) {\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n\n  const selectVideo = (video) => {\n    setSelectedVideo(video);\n  };\n\n  // 함수형 컴포넌트 이기 때문에 관련된 state or props가 바뀌면 함수내 정의된 멤버변수가 다시 만들어진다.\n  // 즉, search도 새롭게 만들어짐. --> state가 바뀔때 마다 search는 새로운 함수를 가르키게 된다 --> 따라서 search_header.jsx에 전달되는 props가 매번 바뀌기 때문에 search_header.jsx에 memo를 사용해도 리랜더 되는 이유이다\n  // 이를 해결하기 위한 방법 : userCallback사용\n  /* \n  Old version : 위의 문제점이 존재하는 version.\n  const search = (query) => {\n    youtube //\n      .search(query)\n      // .then(console.log)\n      .then((videos) => {\n        setVideos(videos);\n        setSelectedVideo(null);\n      });\n  };\n  */\n\n  // New version : 최초 한번만 생성후 이후는 동일한 객체를 리턴해줌, 이상하네... console.log로 확인해보면 딱 한 번만 찍히는데... 하이라이트는 계속 나오는...???\n  // useCallback : 한번 만들고 메모리에 보관 --> 잘못 사용하면 메모리에 부하를 줌\n  const search = useCallback((query) => {\n    youtube //\n      .search(query)\n      // .then(console.log)\n      .then((videos) => {\n        setVideos(videos);\n        setSelectedVideo(null);\n      });\n  }, []);\n\n  useEffect(() => {\n    youtube //\n      .mostPopular()\n      // .then(console.log)\n      .then((videos) => setVideos(videos));\n  }, [youtube]);\n  return (\n    <div className={styles.app}>\n      <SearchHeader onSearch={search} />\n      <section className={styles.content}>\n        {selectedVideo && (\n          <div className={styles.detail}>\n            <VideoDetail video={selectedVideo} />\n          </div>\n        )}\n        <div className={styles.list}>\n          <VideoList\n            videos={videos}\n            onVideoClick={selectVideo}\n            display={selectedVideo ? \"list\" : \"grid\"}\n          />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// import axios from 'axios';\r\n\r\nclass Youtube {\r\n    /* Old version\r\n    constructor(key) {\r\n      this.youtube = axios.create({\r\n        baseURL: 'https://www.googleapis.com/youtube/v3',\r\n        params: {key: key},\r\n      });\r\n    } */\r\n\r\n    // New version : DI를 좀더 깔끔하게 하는 방법임 index.js에서 DI를 받으면 됨\r\n    constructor(httpClient) {\r\n      this.youtube = httpClient;\r\n    }\r\n\r\n    // async로 변경한 예제\r\n    async mostPopular() {      \r\n      const response = await this.youtube.get('videos', {\r\n        params: {\r\n          part: 'snippet',\r\n          chart: 'mostPopular',\r\n          maxResults: 25,\r\n        }\r\n      });\r\n      return response.data.items;\r\n    }\r\n\r\n    // async로 변환하지 않은 예제\r\n    async search(query) {\r\n      const response = await this.youtube.get('search', {\r\n        params: {\r\n          part: 'snippet',\r\n          maxResults: 25,\r\n          type: 'video',\r\n          q: query,\r\n        }\r\n      });\r\n      return response.data.items.map(item => ({ ...item, id: item.id.videoId }));\r\n    }\r\n}\r\n\r\nexport default Youtube;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport Youtube from './service/youtube';\nimport axios from 'axios';\n\n// env에 넣어둠 -> (AIzaSyBJFnCjQwb1_TDPEgkFK7D4CcRzrS1G0g4), env 파일에 관한건 여기 참고 --> https://create-react-app.dev/docs/adding-custom-environment-variables\n// const youtube = new Youtube(process.env.REACT_APP_YOUTUBE_API_KEY);\n\nconst httpClient = axios.create({\n  baseURL: 'https://www.googleapis.com/youtube/v3',\n  params: {key: process.env.REACT_APP_YOUTUBE_API_KEY},\n});\nconst youtube = new Youtube(httpClient);\nReactDOM.render(\n  // React.StrictMode = 자바스크립트의 'use strict' 와 동일, 엄격!!!!!!!, 배포시에는 활성화 되지 않아서 console에 오류가 안나옴~\n  <React.StrictMode>\n    <App youtube={youtube} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"detail\":\"video_detail_detail__1PakS\",\"description\":\"video_detail_description__2NAA8\"};"],"sourceRoot":""}